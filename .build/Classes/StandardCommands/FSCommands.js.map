{
  "version": 3,
  "sources": ["../../../Classes/StandardCommands/FSCommands.ts"],
  "sourcesContent": ["import * as consoon from '..';\n\nexport default {\n    CommandsHidden: false,\n    Commands: [\n        new consoon.Command({\n            cmd: \"whereami\",\n            callback: function (con: consoon.ConsoleIOManager) {\n                con.Logger.Write(con.FileSystem.GetCurrentDirectory(), \"debug\");\n            },\n            help: {\n                CommandName: \"whereami\",\n                CommandDescription: \"Gets the path of the current folder.\",\n                CommandUsage: \"whereami\"\n            }\n        }),\n        new consoon.Command({\n            cmd: \"ls\",\n            callback: function (con: consoon.ConsoleIOManager) {\n                let OriginFiles: string[] = [\n                    \".replit\",\n                    \"replit.nix\",\n                    \"package.json\",\n                    \"package-lock.json\",\n                    \"tsconfig.json\"\n                ];\n                \n                let FileList: string[] = con.FileSystem.GetCurrDirContent();\n                let SortedFileList: string[] = [];\n                \n                for (let x in FileList) {\n                    if (con.FileSystem.IsDir(FileList[x])) {\n                        SortedFileList.unshift(FileList[x]);\n                        continue;\n                    }\n                    if (con.FileSystem.IsFile(FileList[x])) {\n                        SortedFileList.push(FileList[x]);\n                        continue;\n                    }\n                }\n\n                con.Logger.Write(\".\" + \" [Current Directory]\", \"debug\");\n                con.Logger.Write(\"..\" + \" [Parent Directory]\", \"debug\");\n                for (let y in SortedFileList) {\n                    if (con.FileSystem.IsDir(SortedFileList[y])) {\n                        con.Logger.Write(SortedFileList[y] + \" [Directory]\", \"debug\");\n                        continue;\n                    }\n                    if (con.FileSystem.IsFile(SortedFileList[y])) {\n                        if (OriginFiles.includes(SortedFileList[y])) {\n                            con.Logger.Write(SortedFileList[y] + \" [Origin File]\", \"err\");\n                            continue;\n                        }\n                        con.Logger.Write(SortedFileList[y] + \" [File]\", \"default\");\n                        continue;\n                    }\n                    con.Logger.Write(SortedFileList[y], \"err\");\n                }\n            },\n            help: {\n                CommandName: \"ls\",\n                CommandDescription: \"Lists the contents of the folder.\",\n                CommandUsage: \"ls\"\n            }\n        }),\n        new consoon.ArgumentedCommand({\n            cmd: \"mkdir\",\n            callback: function (con: consoon.ConsoleIOManager, args: string[]) {\n                con.FileSystem.MakeDirectory(args[0]);\n            },\n            help: {\n                CommandName: \"mkdir\",\n                CommandDescription: \"Creates a new folder with specified name at CurrDir.\",\n                CommandUsage: \"mkdir <dirname>\"\n            }\n        }),\n        new consoon.ArgumentedCommand({\n            cmd: \"rm\",\n            callback: function (con: consoon.ConsoleIOManager, args: string[]) {\n                con.FileSystem.Delete(args[0]);\n            },\n            help: {\n                CommandName: \"rm\",\n                CommandDescription: \"Removes whatever is at the relative path.\",\n                CommandUsage: \"rm <relative path>\"\n            } \n        }),\n        new consoon.ArgumentedCommand({\n            cmd: \"cd\",\n            callback: function (con: consoon.ConsoleIOManager, args: string[]) {\n                con.FileSystem.ChangeDirRelative(args[0])\n            },\n            help: {\n                CommandName: \"cd\",\n                CommandDescription: \"Moves current directory by relative path.\",\n                CommandUsage: \"cd <relative path>\"\n            }\n        }),\n        new consoon.ArgumentedCommand({\n            cmd: \"cda\",\n            callback: function (con: consoon.ConsoleIOManager, args: string[]) {\n                con.FileSystem.ChangeDirAbsolute(args[0]);\n            },\n            help: {\n                CommandName: \"cda\",\n                CommandDescription: \"Moves current directory by absolute path.\",\n                CommandUsage: \"cda <absolute path>\"\n            }\n        }),\n    ]\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,cAAyB;AAEzB,IAAO,qBAAQ;AAAA,EACX,gBAAgB;AAAA,EAChB,UAAU;AAAA,IACN,IAAI,QAAQ,QAAQ;AAAA,MAChB,KAAK;AAAA,MACL,UAAU,SAAU,KAA+B;AAC/C,YAAI,OAAO,MAAM,IAAI,WAAW,uBAAuB;AAAA;AAAA,MAE3D,MAAM;AAAA,QACF,aAAa;AAAA,QACb,oBAAoB;AAAA,QACpB,cAAc;AAAA;AAAA;AAAA,IAGtB,IAAI,QAAQ,QAAQ;AAAA,MAChB,KAAK;AAAA,MACL,UAAU,SAAU,KAA+B;AAC/C,YAAI,cAAwB;AAAA,UACxB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA;AAGJ,YAAI,WAAqB,IAAI,WAAW;AACxC,YAAI,iBAA2B;AAE/B,iBAAS,KAAK,UAAU;AACpB,cAAI,IAAI,WAAW,MAAM,SAAS,KAAK;AACnC,2BAAe,QAAQ,SAAS;AAChC;AAAA;AAEJ,cAAI,IAAI,WAAW,OAAO,SAAS,KAAK;AACpC,2BAAe,KAAK,SAAS;AAC7B;AAAA;AAAA;AAIR,YAAI,OAAO,MAAM,yBAA8B;AAC/C,YAAI,OAAO,MAAM,yBAA8B;AAC/C,iBAAS,KAAK,gBAAgB;AAC1B,cAAI,IAAI,WAAW,MAAM,eAAe,KAAK;AACzC,gBAAI,OAAO,MAAM,eAAe,KAAK,gBAAgB;AACrD;AAAA;AAEJ,cAAI,IAAI,WAAW,OAAO,eAAe,KAAK;AAC1C,gBAAI,YAAY,SAAS,eAAe,KAAK;AACzC,kBAAI,OAAO,MAAM,eAAe,KAAK,kBAAkB;AACvD;AAAA;AAEJ,gBAAI,OAAO,MAAM,eAAe,KAAK,WAAW;AAChD;AAAA;AAEJ,cAAI,OAAO,MAAM,eAAe,IAAI;AAAA;AAAA;AAAA,MAG5C,MAAM;AAAA,QACF,aAAa;AAAA,QACb,oBAAoB;AAAA,QACpB,cAAc;AAAA;AAAA;AAAA,IAGtB,IAAI,QAAQ,kBAAkB;AAAA,MAC1B,KAAK;AAAA,MACL,UAAU,SAAU,KAA+B,MAAgB;AAC/D,YAAI,WAAW,cAAc,KAAK;AAAA;AAAA,MAEtC,MAAM;AAAA,QACF,aAAa;AAAA,QACb,oBAAoB;AAAA,QACpB,cAAc;AAAA;AAAA;AAAA,IAGtB,IAAI,QAAQ,kBAAkB;AAAA,MAC1B,KAAK;AAAA,MACL,UAAU,SAAU,KAA+B,MAAgB;AAC/D,YAAI,WAAW,OAAO,KAAK;AAAA;AAAA,MAE/B,MAAM;AAAA,QACF,aAAa;AAAA,QACb,oBAAoB;AAAA,QACpB,cAAc;AAAA;AAAA;AAAA,IAGtB,IAAI,QAAQ,kBAAkB;AAAA,MAC1B,KAAK;AAAA,MACL,UAAU,SAAU,KAA+B,MAAgB;AAC/D,YAAI,WAAW,kBAAkB,KAAK;AAAA;AAAA,MAE1C,MAAM;AAAA,QACF,aAAa;AAAA,QACb,oBAAoB;AAAA,QACpB,cAAc;AAAA;AAAA;AAAA,IAGtB,IAAI,QAAQ,kBAAkB;AAAA,MAC1B,KAAK;AAAA,MACL,UAAU,SAAU,KAA+B,MAAgB;AAC/D,YAAI,WAAW,kBAAkB,KAAK;AAAA;AAAA,MAE1C,MAAM;AAAA,QACF,aAAa;AAAA,QACb,oBAAoB;AAAA,QACpB,cAAc;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
