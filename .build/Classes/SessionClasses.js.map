{
  "version": 3,
  "sources": ["../../Classes/SessionClasses.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport { ConsoleIOManager } from './ConsoleClasses';\n\ninterface SessionData {\n    SessionName: string;\n    SessionColor: number[];\n}\n\nexport class SessionManager {\n    private Parent: ConsoleIOManager;\n    LoadedSession: SessionData | undefined;\n\n    constructor(parent: ConsoleIOManager, name?: string) {\n        this.Parent = parent;\n        if (!name) {\n            this.LoadedSession = {\n                SessionName: \"Default\",\n                SessionColor: [255, 255, 255]\n            }\n            return;\n        }\n        this.LoadedSession = this.GetSessionFromJSON(name)\n    }\n\n    GetSessionFromJSON(SessionName: string) {\n        let ConfigMgr = this.Parent.ConfigManager;\n        let Config = ConfigMgr.GetConfig();\n\n        if (Config[\"paths\"].sessionPath) {\n            let Session = fs.readFileSync(path.join(__dirname, Config[\"paths\"].sessionPath + \"/\" + SessionName + \".json\"));\n            let SessionData = JSON.parse(Session.toString());\n\n            return {\n                SessionName: SessionData.SessionName,\n                SessionColor: SessionData.SessionColor\n            }\n        }\n    }\n\n    SaveSessionToJSON(SessionName: string) {\n        // TODO: Implement Session Saving\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,SAAoB;AACpB,WAAsB;AAQf,qBAAqB;AAAA,EAChB;AAAA,EACR;AAAA,EAEA,YAAY,QAA0B,MAAe;AACjD,SAAK,SAAS;AACd,QAAI,CAAC,MAAM;AACP,WAAK,gBAAgB;AAAA,QACjB,aAAa;AAAA,QACb,cAAc,CAAC,KAAK,KAAK;AAAA;AAE7B;AAAA;AAEJ,SAAK,gBAAgB,KAAK,mBAAmB;AAAA;AAAA,EAGjD,mBAAmB,aAAqB;AACpC,QAAI,YAAY,KAAK,OAAO;AAC5B,QAAI,SAAS,UAAU;AAEvB,QAAI,OAAO,SAAS,aAAa;AAC7B,UAAI,UAAU,GAAG,aAAa,KAAK,KAAK,WAAW,OAAO,SAAS,cAAc,MAAM,cAAc;AACrG,UAAI,cAAc,KAAK,MAAM,QAAQ;AAErC,aAAO;AAAA,QACH,aAAa,YAAY;AAAA,QACzB,cAAc,YAAY;AAAA;AAAA;AAAA;AAAA,EAKtC,kBAAkB,aAAqB;AAAA;AAAA;",
  "names": []
}
