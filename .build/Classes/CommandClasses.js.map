{
  "version": 3,
  "sources": ["../../Classes/CommandClasses.ts"],
  "sourcesContent": ["import { ConsoleIOManager, ConsoleLogger } from \"./ConsoleClasses\";\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ninterface CommandData {\n    cmd: string,\n    callback: Function,\n    help: {\n        CommandName: string,\n        CommandDescription: string,\n        CommandUsage: string,\n    },\n}\n\nexport class CommandManager {\n    private Parent: ConsoleIOManager;\n    LoadedCommandGroups: CommandGroup[] = [];\n    \n    constructor(parent: ConsoleIOManager) {\n        this.Parent = parent;\n        this.LoadCommandGroups();\n    }\n\n    GetNamesOfLoadedGroups(): string[] {\n        let NamesArray: string[] = [];        \n        for (const element of this.LoadedCommandGroups) {\n            if (!element.GroupHidden) NamesArray.push(element.GroupName);\n        }\n        return NamesArray;\n    }\n    \n    FindCommandGroupByName(name: string): CommandGroup | undefined {\n        for (const element of this.LoadedCommandGroups) {\n            if (element.GroupName == name) return element;\n        }\n        return undefined;\n    }\n\n    LoadCommandGroups(): void {\n        // Load inbuilt commands\n        let InbuiltPath: string = path.join(__dirname, \"./StandardCommands\");\n        \n        fs.readdirSync(InbuiltPath).forEach((file) => {            \n            if (file.endsWith(\".js.map\") || file.startsWith(\"index\") || file.startsWith(\"CommandHandler\")) return;\n            \n            let CG = new CommandGroup(file.split(\"Commands.js\")[0].toLowerCase());            \n            let RawCommandArray = require(path.join(InbuiltPath, file));\n            \n            CG.SetHiddenBit(RawCommandArray.default[\"CommandsHidden\"]);\n            let CommandArray = RawCommandArray.default[\"Commands\"];\n                \n            CG.AddCommandsToGroup(CommandArray);\n            this.LoadedCommandGroups.push(CG);\n        });\n    }\n\n    LoadExtraCommandGroups(absPath: string): void {\n        // Load commands from external source\n        fs.readdirSync(absPath).forEach((file) => {\n            if (file.endsWith(\".js.map\") || file.startsWith(\"index\") || file.startsWith(\"CommandHandler\")) return;\n            \n            let CG = new CommandGroup(file.split(\"Commands.js\")[0].toLowerCase());            \n            let RawCommandArray = require(path.join(__dirname, \"../Commands/\", file));\n            \n            CG.SetHiddenBit(RawCommandArray.default[\"CommandsHidden\"]);\n            let CommandArray = RawCommandArray.default[\"Commands\"];\n                \n            CG.AddCommandsToGroup(CommandArray);\n            this.LoadedCommandGroups.push(CG);\n        });\n    }\n\n    FindCommandInAllGroups(Command: string): Command | undefined {\n        for (let CommandGroup of this.LoadedCommandGroups) {\n            let CommandObject = CommandGroup.FindCommand(Command);\n            if (CommandObject) return CommandObject;\n        }\n        return undefined;\n    }\n\n    FindAndRunCommand(CommandData: { Command: string, Args: string[] }): void {\n        let Command = this.FindCommandInAllGroups(CommandData.Command);\n        if (!Command) {\n            this.Parent.Logger.Write(`Unknown command: ${CommandData.Command}`, \"err\"); return;\n        }\n        Command.RunCommand(this.Parent, CommandData.Args); return;\n    }\n\n    GetCommandGroups(): CommandGroup[] {\n        return this.LoadedCommandGroups;\n    }\n}\n\nexport class CommandGroup {\n    GroupName: string;\n    GroupHidden: boolean = false;\n    GroupCommands: Command[];\n\n    constructor(name: string) {\n        this.GroupName = name;\n        this.GroupCommands = [];\n    }\n\n    AddCommandsToGroup(commands: Command[]): void {\n        for (let command of commands) {\n            this.GroupCommands.push(command);\n        }\n    }\n\n    FindCommand(CommandName: string): Command | undefined {\n        for (let command of this.GroupCommands) {\n            if (command.Command == CommandName) return command;\n        }\n        return undefined;\n    }\n\n    SetHiddenBit(bit: boolean): void {\n        this.GroupHidden = bit;\n    }\n    \n    GetHelpData() {\n        let CommandGroupHelp = [];\n        for (let command of this.GroupCommands) { CommandGroupHelp.push(command.CommandHelp); }\n        return CommandGroupHelp;\n    }\n}\n\nexport class Command {\n    Command: string;\n    CommandCallback: Function;\n    CommandHelp: {\n        CommandName: string;\n        CommandDescription: string;\n        CommandUsage: string;    \n    };\n\n    constructor(CommandData: CommandData) {\n        this.Command = CommandData.cmd;\n        this.CommandCallback = CommandData.callback;\n        this.CommandHelp = CommandData.help;\n    }\n\n    GetName(): string {\n        return this.Command;\n    }\n\n    RunCommand(con: ConsoleIOManager, args?: string[]): void {\n        this.CommandCallback(con);\n    }\n}\n\nexport class ArgumentedCommand extends Command {\n    constructor(CommandData: CommandData) {\n        super(CommandData);\n    }\n\n    RunCommand(con: ConsoleIOManager, args: string[]): void {\n        this.CommandCallback(con, args);\n    }\n}\n\nexport class ArgumentedSafeCommand extends Command {\n    constructor(CommandData: CommandData) {\n        super(CommandData);\n    }\n\n    RunCommand(con: ConsoleIOManager, args: string[]): void {\n        this.CommandCallback(args);\n    }\n}"],
  "mappings": "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",
  "names": []
}
