{
  "version": 3,
  "sources": ["../../Classes/index.ts"],
  "sourcesContent": ["import { ConsoleIOManager, ConsoleLogger } from './ConsoleClasses';\nimport { Command, ArgumentedCommand, ArgumentedSafeCommand, CommandGroup, CommandManager } from './CommandClasses';\n\nclass Console {\n    private ConsolePromptString: string;\n    private ConsoleHeaderString: string;\n    IOManager: ConsoleIOManager;\n\n    constructor(ConsoleStartParameters: { SessionName: string, HeaderString: string }) {\n        this.IOManager = new ConsoleIOManager();\n\n        this.ConsoleHeaderString = ConsoleStartParameters.HeaderString;\n        \n        this.IOManager.SessionManager.GetSessionFromJSON(ConsoleStartParameters.SessionName);\n\n        this.ConsolePromptString = ConsoleStartParameters.SessionName + \" >\";\n   }\n\n    Initialize(): void {\n        this.IOManager.Logger.WriteAsHeader(this.ConsoleHeaderString + \"\\n\");\n        this.IOManager.Reader.RunConsole(this.ConsolePromptString);\n    }\n\n    InitializeWithCustom(absPath: string) {\n        this.IOManager.CommandManager.LoadExtraCommandGroups(absPath);\n        this.IOManager.Logger.WriteAsHeader(this.ConsoleHeaderString + \"\\n\");\n        this.IOManager.Reader.RunConsole(this.ConsolePromptString);\n    }\n}\n\nexport {\n    Console,\n    ConsoleIOManager,\n    ConsoleLogger,\n    Command,\n    ArgumentedCommand,\n    ArgumentedSafeCommand,\n    CommandGroup,\n    CommandManager\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAgD;AAChD,4BAAgG;AAEhG,cAAc;AAAA,EACF;AAAA,EACA;AAAA,EACR;AAAA,EAEA,YAAY,wBAAuE;AAC/E,SAAK,YAAY,IAAI;AAErB,SAAK,sBAAsB,uBAAuB;AAElD,SAAK,UAAU,eAAe,mBAAmB,uBAAuB;AAExE,SAAK,sBAAsB,uBAAuB,cAAc;AAAA;AAAA,EAGpE,aAAmB;AACf,SAAK,UAAU,OAAO,cAAc,KAAK,sBAAsB;AAC/D,SAAK,UAAU,OAAO,WAAW,KAAK;AAAA;AAAA,EAG1C,qBAAqB,SAAiB;AAClC,SAAK,UAAU,eAAe,uBAAuB;AACrD,SAAK,UAAU,OAAO,cAAc,KAAK,sBAAsB;AAC/D,SAAK,UAAU,OAAO,WAAW,KAAK;AAAA;AAAA;",
  "names": []
}
