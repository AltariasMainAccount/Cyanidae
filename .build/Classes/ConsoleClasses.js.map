{
  "version": 3,
  "sources": ["../../Classes/ConsoleClasses.ts"],
  "sourcesContent": ["import * as readline from 'readline';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport * as com from './CommandClasses';\nimport * as ses from './SessionClasses';\nimport * as util from './UtilityClasses';\n\n/*\n    Input Output Manager and Interfaces\n\n    Manages the Input and the Output of the Console\n*/\n\nexport class ConsoleIOManager {    \n    // All the managers for all the commands\n    CommandManager: com.CommandManager = new com.CommandManager(this);\n    SessionManager: ses.SessionManager = new ses.SessionManager(this);\n    ConfigManager: util.ConfigurationManager = new util.ConfigurationManager(this);\n\n    // Reader and Logger, declared after the managers to assure they exist.\n    FileSystem: ConsoleFileSystem = new ConsoleFileSystem(this);\n    Reader: ConsoleReader = new ConsoleReader(this);\n    Logger: ConsoleLogger = new ConsoleLogger(this);\n}\n\n/*\n    Reader and Logger Classes\n\n    Used as default parts of the console, no matter the type\n*/\n\nclass ConsoleReader {\n    private Parent: ConsoleIOManager;\n    \n    LineReaderInterface: readline.Interface = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout\n    });\n\n    constructor(parent: ConsoleIOManager) {\n        this.Parent = parent;\n    }\n\n    private InterpretAsCommand(line: string) {\n        let CommandData: string[] = line.split(\" \");\n\n        let Command: string = CommandData[0];\n        let Args: string[] = CommandData.slice(1);\n        \n        return { Command: Command, Args: Args };\n    }\n    \n    RunConsole(ConsolePrompt: string): void {\n        this.LineReaderInterface?.setPrompt(ConsolePrompt + ' ');\n        this.LineReaderInterface?.prompt();\n\n        this.LineReaderInterface?.on('line', (line) => {\n            this.Parent.CommandManager.FindAndRunCommand(this.InterpretAsCommand(line));\n            this.LineReaderInterface?.prompt();\n        }).on('close', function() {\n            console.log('\\nHave a great day!');\n            process.exit(0);\n        });\n    }\n\n    CloseReader() {\n        this.LineReaderInterface.close();\n    }\n}\n\nexport class ConsoleLogger {\n    private Parent: ConsoleIOManager;\n\n    DefaultColorSet: {\n        warn: util.Color;\n        err: util.Color;\n        info: util.Color;\n        debug: util.Color;\n        reset: util.Color;\n    }\n    \n    constructor(parent: ConsoleIOManager) {\n        this.Parent = parent;\n\n        let ConfigManager = this.Parent.ConfigManager;\n        let ConfigData = ConfigManager.GetConfig();\n\n        this.DefaultColorSet = {\n            warn: new util.Color(ConfigData.defaultColorSet.warn),\n            err: new util.Color(ConfigData.defaultColorSet.err),\n            info: new util.Color(ConfigData.defaultColorSet.info),\n            debug: new util.Color(ConfigData.defaultColorSet.debug),\n            reset: new util.Color(this.Parent.SessionManager.LoadedSession!.SessionColor)\n        }\n    }\n\n    WriteAsHeader(HeaderMessage: string): void {\n        let Color: util.Color = this.DefaultColorSet.reset;\n        \n        console.clear();\n        console.log(`${Color.GetForegroundColorAsASCII()}${HeaderMessage}${this.DefaultColorSet.reset.GetForegroundColorAsASCII()}`);\n    }\n    \n    Write(Message: string, Type?: string): void {\n        let Color: util.Color;\n        \n        switch (Type) {\n            case \"warn\":\n                Color = this.DefaultColorSet.warn;\n                break;\n            case \"err\":\n                Color = this.DefaultColorSet.err;\n                break;\n            case \"info\":\n                Color = this.DefaultColorSet.info;\n                break;\n            case \"debug\":\n                Color = this.DefaultColorSet.debug;\n                break;\n            default:\n                Color = this.DefaultColorSet.reset;\n                break;\n        }\n        \n        console.log(`${Color.GetForegroundColorAsASCII()}${Message}${this.DefaultColorSet.reset.GetForegroundColorAsASCII()}`);\n    }\n\n    OutputList(List: any): void {\n        console.table(List);\n    }\n}\n\nexport class ConsoleFileSystem {\n    private Parent: ConsoleIOManager;\n    private CurrentDirectory: string;\n    \n    constructor(parent: ConsoleIOManager) {\n        this.Parent = parent;\n        this.CurrentDirectory = __dirname;\n    }\n\n    private CheckIfRunningOnRepl(): boolean {\n        if (fs.existsSync(path.join(__dirname, \"../../.replit\")) || fs.existsSync(path.join(__dirname, \"../../replit.nix\"))) {\n            return true;\n        }\n        return false;\n    }\n    \n    GetCurrentDirectory(): string {\n        return this.CurrentDirectory;\n    }\n\n    GetCurrDirContent(): string[] {\n        let FileList: string[] = [];\n        \n        try {\n            fs.readdirSync(this.CurrentDirectory).forEach(file => {\n                FileList.push(file);\n            });\n        } catch (e) {\n            this.Parent.Logger.Write(\"Error occured: \" + e);\n            return [];\n        }\n\n        return FileList;\n    } \n    \n    ChangeDirRelative(newRelPath: string): boolean {\n        if (fs.existsSync(path.join(this.CurrentDirectory, newRelPath))) {\n            this.CurrentDirectory = path.join(this.CurrentDirectory, newRelPath);\n            return true;\n        }\n        return false;\n    }\n\n    ChangeDirAbsolute(newPath: string): boolean {\n        if (fs.existsSync(newPath)) {\n            this.CurrentDirectory = newPath;\n            return true;\n        }\n        return false;\n    }\n    \n    MakeDirectory(dirName: string): boolean {\n        if (!this.CheckIfRunningOnRepl()) {\n            try {\n                fs.mkdirSync(path.join(this.CurrentDirectory, dirName));\n                return true;\n            } catch (e) {\n                return false;\n            }   \n        } else {\n            this.Parent.Logger.Write(\"Cannot complete action: Modifying Origin Repl is an illegal instruction\", \"err\");\n            this.Parent.Logger.Write(\"Illegal Instruction - ERR_REPLITRUN_ATTEMPTED_MKDIR\", \"err\");\n            return false;\n        }\n    }\n\n    Delete(relPath: string): boolean {\n        if (!this.CheckIfRunningOnRepl()) {\n            try {\n                if (this.IsFile(relPath)) {\n                    fs.unlinkSync(path.join(this.CurrentDirectory, relPath));\n                    return true;\n                }\n                if (this.IsDir(relPath)) {\n                    fs.rmdirSync(path.join(this.CurrentDirectory, relPath));\n                    return true;   \n                }\n                return false;\n            } catch (e) {\n                return false;\n            }   \n        } else {\n            this.Parent.Logger.Write(\"Cannot complete action: Modifying Origin Repl is an illegal instruction\", \"err\");\n            this.Parent.Logger.Write(\"Illegal Instruction - ERR_REPLITRUN_ATTEMPTED_RM\", \"err\");\n            return false;\n        } \n    }\n\n    IsFile(file: string): boolean {\n        if (fs.existsSync(path.join(this.CurrentDirectory, file))) {\n            let stats = fs.statSync(path.join(this.CurrentDirectory, file));\n            return stats.isFile();\n        }\n        return false;\n    }\n\n    IsDir(file: string): boolean {\n        if (fs.existsSync(path.join(this.CurrentDirectory, file))) {\n            let stats = fs.statSync(path.join(this.CurrentDirectory, file));\n            return stats.isDirectory();\n        }\n        return false;\n    }\n}"],
  "mappings": "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",
  "names": []
}
